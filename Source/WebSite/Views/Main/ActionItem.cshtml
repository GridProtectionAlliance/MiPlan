@*******************************************************************************************************
//  Patches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/20/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Specialized
@using MiPlan.Models
@using GSF
@using GSF.Data.Model
@using GSF.Web.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;
    NameValueCollection parameters = Request.QueryString;
    int planID = int.Parse(parameters["PlanID"] ?? "0");
    ViewBag.planID = planID;
    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
    statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');



    const string noneImage = "greenlight.png";
    const string dueImage = "yellowlight.png";
    const string pastDueImage = "redlight.png";
    const string completedImage = "blacklight.png";
  

    ViewBag.CustomTitle = "Action Items for \"" + parameters["Title"] + "\" Mitigation Plan";
    ViewBag.PageHasMenu = false;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
        {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle"},
        new[] { "Title", "Title", "text-left" },
        new[] { "PriorityKey", "Priority", "text-left"},
        new[] { "ActionTypeKey", "Action Status", "text-left" },
        new[] { "ScheduledEndDate", "Due Date", "text-left" }

    };

    //ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{
   
    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getDiscoveryStatusImage($($element), $data)}"></td>
    <td width="15%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Title, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: lookupPriorityValue(PriorityKey)"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: lookupActionstatusValue(ActionTypeKey)"></td>
    <td width="40%" class="text-left valign-middle" data-bind="text: ScheduledEndDate.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
        @Html.Raw(dataContext.AddSelectField<ActionItem, ActionItem>("ParentID", "ID", "Title", restriction: new RecordRestriction("PlanID = {0}", ViewBag.planID)))
        @Html.Raw(Model.AddValueListSelectField<ActionItem>("ActionTypeKey" , "actionStatus"))
        @Html.Raw(Model.AddValueListSelectField<ActionItem>("PriorityKey", "priority"))
        @Html.Raw(dataContext.AddInputField<ActionItem>("Title"))
        @Html.Raw(dataContext.AddTextAreaField<ActionItem>("Details"))
        @Html.Raw(dataContext.AddDateField<ActionItem>("ScheduledEndDate"))
    </div>
}
@Html.Partial("PagedViewModel")


@section Scripts {
    <script>
        "use strict";
        @Html.Raw(Model.RenderViewModelConfiguration<ActionItem>(ViewBag, "ScheduledEndDate" , planID))
        @Html.Raw(Model.RenderValueListClientLookupFunction("actionStatus"))
        @Html.Raw(Model.RenderValueListClientLookupFunction("priority"))



        $(viewModel).on("derivingObservableRecord", function (event, observableRecord) {
            // Initialize selected menu item record
            observableRecord.PlanID(@planID);

        });

        $(function() {
            $("#addNewEditDialog").on("shown.bs.modal", function() {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editMenuItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.prop("disabled", true);
                dismissButtons.invisible();
            });

            $("#addNewEditDialog").on("hidden.bs.modal", function() {
                // On add/edit dialog hidden, re-enable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editMenuItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.visible();
                dismissButtons.prop("disabled", false);
            });
        });

        function getDiscoveryStatusImage(element, record) {
            if (record.ActionTypeKey === 3) {
                image = "@completedImage";
                title = "Action Complete";
            } else {
                const daysUntilEnd = (record.ScheduledEndDate.toDate()).daysBetween(new Date());

                var image, title;

                switch (true) {
                    case (daysUntilEnd < 0):
                        image = "@pastDueImage";
                        title = "Past Due";
                        break;
                    case (daysUntilEnd < 7):
                        image = "@dueImage";
                        title = "Due";
                        break;
                    default:
                        image = "@noneImage";
                        title = "OK";
                        break;
                }
            }
            

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }

        $("#editMenuItemDialog").on("hidden.bs.modal", function () {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#editMenuItemFrame").attr("src", "about:blank");
        });

    </script>
}