@*******************************************************************************************************
//  Patches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/20/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Specialized
@using MiPlan.Models
@using GSF
@using GSF.Data.Model
@using GSF.Web.Model
@model AppModel
@section StyleSheets {
    @Styles.Render("~/css.bundle/fileinput")
}


@{
    DataContext dataContext = Model.DataContext;
    NameValueCollection parameters = Request.QueryString;
    int planID = int.Parse(parameters["PlanID"] ?? "0");
    bool hideButton = bool.Parse(parameters["HideButton"] ?? "false");
    ViewBag.planID = planID;
    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
    statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');
    int pastDue = ViewBag.alarmLimits[0].Value;
    int due = ViewBag.alarmLimits[1].Value;



    const string noneImage = "greenlight.png";
    const string dueImage = "yellowlight.png";
    const string pastDueImage = "redlight.png";
    const string completedImage = "blacklight.png";
    const string pendingImage = "magentalight.png";
    const string deferredImage = "bluelight.png";
    const string waitingImage = "greylight.png";


    ViewBag.CustomTitle = "Action Items for \"" + parameters["Title"] + "\" Mitigation Plan";
    ViewBag.PageHasMenu = false;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
        {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle"},
        new[] { "Title", "Title", "text-left" },
        new[] { "PriorityKey", "Priority", "text-left"},
        new[] { "ActionTypeKey", "Action Status", "text-left" },
        new[] { "ScheduledEndDate", "Due Date", "text-left" },
        new[] { null, "Documents", "text-center valign-middle" }


    };

    //ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.HideAddNewButton = hideButton;
    //ViewBag.CanEdit = !hideButton;
    //ViewBag.CanDelete = !hideButton;

}

<!-- Modal -->
<div id="updateModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4>Update Status</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <select class="form-control" id="updateSelect">
                    <option value="1">Pending</option>
                    <option value="2">Started</option>
                    <option value="3">Completed</option>
                </select>
            </div>
            <div class="modal-footer">
                <button type="submit" id="updateSubmit" class="btn btn-default" data-dismiss="modal">Save</button>
                <button type="button" class="btn btn-default" onclick="" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

@helper BodyRows()
{
   
    <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getDiscoveryStatusImage($($element), $data)}"></td>
    <td width="15%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Title, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: lookupPriorityValue(PriorityKey)"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: lookupActionstatusValue(ActionTypeKey)"></td>
    @*<td width="20%" class="text-left valign-middle"><button type="button" data-bind="text: lookupActionstatusValue(ActionTypeKey), click: updateStatus" class="btn btn-danger btn-sm">Add</button></td>*@
    <td width="40%" class="text-left valign-middle" data-bind="text: ScheduledEndDate.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected && $parent.canEdit() ">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(ID, $($element)), attr: {id: 'documentCount' + ID}">0</span></button></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    <div class="col-md-12">
        @Html.Raw(dataContext.AddSelectField<ActionItem, ActionItem>("ParentID", "ID", "Title", restriction: new RecordRestriction("PlanID = {0}", ViewBag.planID)))
        @Html.Raw(Model.AddValueListSelectField<ActionItem>("PriorityKey", "priority"))
        <div data-bind="visible:  $parent.recordMode() != RecordMode.AddNew">
            @Html.Raw(Model.AddValueListSelectField<ActionItem>("ActionTypeKey", "actionStatus"))
        </div>
        @Html.Raw(dataContext.AddInputField<ActionItem>("Title"))
        @Html.Raw(dataContext.AddTextAreaField<ActionItem>("Details"))
        @Html.Raw(dataContext.AddDateField<ActionItem>("ScheduledEndDate"))
    </div>
    <div class="row" data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
        <div class="col-md-12">
            <div class="form-group">
                <label for="uploadFiles">Add Action Related Documents:</label>
                <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
            </div>
        </div>
    </div>

}
@Html.Partial("PagedViewModel")
<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
@Scripts.Render("~/js.bundle/fileinput")
    <script>
        "use strict";
        @Html.Raw(Model.RenderViewModelConfiguration<ActionItem>(ViewBag, "ScheduledEndDate", planID))
        @Html.Raw(Model.RenderValueListClientLookupFunction("actionStatus"))
        @Html.Raw(Model.RenderValueListClientLookupFunction("priority"))


        $(viewModel).on("beforeSave", function(event, observableRecord) {
            // Initialize selected menu item record
            observableRecord.PlanID(@planID);

        });

        //function updateStatus(record, element) {
        //    $('#updateModal').modal();
        //    $('#updateSubmit').on('click', function () {
        //        console.log(element);
        //        var value = document.getElementById('updateSelect').value;
        //        var r = record;
        //        r.ActionTypeKey = value;
        //        element.text = lookupActionstatusValue(r.ActionTypeKey);
        //        dataHub.updateActionItem(r);
        //        element = null;
        //        record = null;
        //    });
        //}


        function getDiscoveryStatusImage(element, record) {
            var image, title;

            if (record.ActionTypeKey === 3) {
                image = "@completedImage";
                title = "Action Complete";
            } else if (record.ActionTypeKey === 2) {
                const daysUntilEnd = (record.ScheduledEndDate.toDate()).daysBetween(new Date());

                switch (true) {
                case (daysUntilEnd < @pastDue):
                    image = "@pastDueImage";
                    title = "Past Due";
                    break;
                case (daysUntilEnd < @due):
                    image = "@dueImage";
                    title = "Due";
                    break;
                default:
                    image = "@noneImage";
                    title = "OK";
                    break;
                }
            } else if (record.ActionTypeKey === 1) {
                image = "@pendingImage";
                title = "Pending Approval";
            } else if (record.ActionTypeKey === 5) {
                image = "@deferredImage";
                title = "Deferred";
            } else if (record.ActionTypeKey === 4) {
                image = "@waitingImage";
                title = "Waiting";
            }

            element.attr("src", "@statusLightsImagePath" + image);
            element.attr("alt", title);
            element.attr("title", title);

            return undefined;
        }
        
        const fileUploadUrl = "@Html.Raw(Url.Content("~/FileUploadHandler.ashx?SourceTable=ActionItemDocument&SourceField=ActionItemID"))";
        var selectedFiles;
        

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            selectedFiles = $("#uploadFiles").fileinput("getFileStack");
        });

        $(viewModel).on("recordSaved", function (event, record, newRecord) {
            if (newRecord && selectedFiles.length > 0 && viewModel.dataHubIsConnected()) {
                dataHub.getLastActionItemID().done(function (actionID) {
                    $("#uploadFiles").fileinput({
                        uploadUrl: fileUploadUrl + "&SourceID=" + actionID.toString(),
                        uploadAsync: true
                    });

                    for (var i = 0; i < selectedFiles.length; i++) {
                        $("#uploadFiles").fileinput("addToStack", selectedFiles[i]);
                    }

                    $("#uploadFiles").fileinput("upload");
                });
            }
        });

        
        function getDocumentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("ActionItem", sourceID, null).done(function(count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function() {
            setTimeout(function() {
                $("#manageDocumentsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.ID).text(), 0));
            var initialMode = "";

            //if (count < 1)
            //    initialMode = "/AddNew";

           
            $("#manageDocumentsFrame")
                .attr({
                    "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=ActionItem&SourceField=ActionItemID&SourceID=" + record.ID + "&Name=" + encodeURIComponent(record.Title) + "&HideButton=" + ("@hideButton").toLowerCase(),
                    "height": ($(document).height() - 150 ) + "px",
                    "width": "100%"
        });

        $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function() {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });

        $(function () {
            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });
            $("#addNewEditDialog").on("shown.bs.modal", function () {
                $("#uploadFiles").fileinput({
                    uploadUrl: fileUploadUrl,
                    uploadAsync: true,
                    showUpload: false,
                    showRemove: true,
                    showPreview: false,
                    minFileCount: 1,
                    maxFileCount: 12
                });

            });

        });

    </script>
}