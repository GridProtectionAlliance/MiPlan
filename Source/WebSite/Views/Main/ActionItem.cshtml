@*******************************************************************************************************
//  Patches.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/20/2016 - Ritchie Carroll
//       Generated original version of source code.
//
//*****************************************************************************************************@
@using System.Collections.Specialized
@using MiPlan.Models
@using GSF
@using GSF.Web.Model
@model AppModel
@{
    DataContext dataContext = Model.DataContext;
    NameValueCollection parameters = Request.QueryString;
    int planID = int.Parse(parameters["PlanID"] ?? "0");

    ViewBag.CustomTitle = "Action Items for \"" + parameters["Title"] + "\" Mitigation Plan";
    ViewBag.PageHasMenu = false;

    // Define column headers, use null for field name to make column non-sortable
    ViewBag.HeaderColumns = new[]
        {   //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle"},
        new[] { "Title", "Title", "text-left" },
        new[] { "PriorityKey", "Priority", "text-left"},
        new[] { "ActionTypeKey", "ActionType", "text-left" },
        new[] { "ScheduledEndDate", "End Date", "text-left" }

    };

    //ViewBag.HideUnauthorizedControls = true;

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{
    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
    statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');

    <td width="5%" class="text-center valign-middle"><img src="@(statusLightsImagePath)greenlight.png" alt="Enabled" data-bind=""><img src="@(statusLightsImagePath)disabledlight.png" alt="Disabled" data-bind=""></td>
    <td width="15%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: Title, click: $parent.viewPageRecord"></button></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: lookupPriorityValue(PriorityKey)"></td>
    <td width="20%" class="text-left valign-middle" data-bind="text: lookupActionstatusValue(ActionTypeKey)"></td>
    <td width="40%" class="text-left valign-middle" data-bind="text: ScheduledEndDate.formatDate(DateFormat)"></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
    int defaultCriticalAlarmDays;
    string setting;

    // Get default critical alarm days
    if (!Model.Global.ApplicationSettings.TryGetValue("criticalAlarmDays", out setting) || !int.TryParse(setting, out defaultCriticalAlarmDays)) {
        defaultCriticalAlarmDays = 3;
    }

    // Validate default value
    defaultCriticalAlarmDays = Math.Abs(defaultCriticalAlarmDays);

    if (defaultCriticalAlarmDays < 2 || defaultCriticalAlarmDays > 9) {
        defaultCriticalAlarmDays = 3;
    }

    <div class="col-md-12">
        @Html.Raw(dataContext.AddInputField<ActionItem>("ParentID"))
        @Html.Raw(dataContext.AddInputField<ActionItem>("PlanID"))
        @Html.Raw(dataContext.AddInputField<ActionItem>("ActionTypeKey"))
        @Html.Raw(dataContext.AddInputField<ActionItem>("PriorityKey"))
        @Html.Raw(dataContext.AddInputField<ActionItem>("Title"))
        @Html.Raw(dataContext.AddTextAreaField<ActionItem>("Details"))
        @Html.Raw(dataContext.AddDateField<ActionItem>("ScheduledStartDate"))
        @Html.Raw(dataContext.AddDateField<ActionItem>("ScheduledEndDate"))
    </div>
}
@Html.Partial("PagedViewModel")


@section Scripts {
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<ActionItem>(ViewBag, "ScheduledEndDate" , planID))
        @Html.Raw(Model.RenderValueListClientLookupFunction("actionStatus"))
        @Html.Raw(Model.RenderValueListClientLookupFunction("priority"))
        "use strict";

        $(viewModel).on("beforeEdit", function(event, observableRecord) {
            // Initialize selected menu item record
            observableRecord.PlanID(@planID);
        });

        $(function() {
            $("#addNewEditDialog").on("shown.bs.modal", function() {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editMenuItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.prop("disabled", true);
                dismissButtons.invisible();
            });

            $("#addNewEditDialog").on("hidden.bs.modal", function() {
                // On add/edit dialog hidden, re-enable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editMenuItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.visible();
                dismissButtons.prop("disabled", false);
            });
        });
       
    </script>
}