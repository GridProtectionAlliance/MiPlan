@*******************************************************************************************************
//  Plan.cshtml - Gbtc
//
//  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/03/2016 - Russell Robertson
//       Generated original version of source code.
//
//*****************************************************************************************************@

@using MiPlan.Models
@using GSF
@using GSF.Web.Model
@model AppModel
@section StyleSheets {
    @Styles.Render("~/css.bundle/fileinput")
}

@{
    DataContext dataContext = Model.DataContext;
    DataContext buContext = Model.BUDataContext;

    string statusLightsImagePath = Model.GetPageSetting(ViewBag, "statusLightsImagePath", "~/Images/StatusLights/Small/");
    statusLightsImagePath = Url.Content(statusLightsImagePath).EnsureEnd('/');



    const string noneImage = "greenlight.png";
    const string dueImage = "yellowlight.png";
    const string pastDueImage = "redlight.png";
    const string completedImage = "blacklight.png";
    const string pendingImage = "magentalight.png";
    const string deferredImage = "bluelight.png";
    const string waitingImage = "greylight.png";

}
@*<p>&nbsp;</p>
<ul>
    <li>A list of "open" mitigation plans will be displayed.</li>
    <li>A filter will be available at the top of the screen for "Business Unit" and default to the BUCs or SMEs BU -- or to "all" for everyone else.</li>
    <li>There can be multiple plans available for each patch.</li>
    <li>The list will be sorted by patchID (the TVA assigned label), BUG, and title.</li>
    <li>An SPM can create a new plan for this patch for their BU.  Only one plan per BUgroup per patch is allowed.</li>
    <li>A BUC can delete a plan for their BUG provided they have not approved it.  Following plan approval, only the Owner can remove it.  It will be marked as deleted in the database -- but will have no GUI tools available to retrieve it -- since there 
    can only be one plan per patch per BUG.</li>
    <li>Unfortunately, if a plan is required then this plan is for this BUG only.  If it turns out there is a common plan that is shared among BUs, then this plan must be replicated since the action items for execution of the plan are assigned the BUG
    that owns it.</li>
    <li>The BUC must approve the plan as a whole to stop the compliance timer.</li>
    <li>A BUC can add or remove action items in a Plan following approval without compliance impact.</li>
  

</ul>
<p>&nbsp;</p>
<table class="table">
    <thead>
        <tr>
            <th>&nbsp;</th>
            <th>Required Fields</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>1</td>
            <td>Patch Identifier</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Justification</td>
        </tr>
        <tr>
            <td>3</td>
            <td>Summary</td>
        </tr>
       
    </tbody>
</table>*@
@*<p>&nbsp;</p>
<table class="table">
    <thead>
        <tr>
            <th>&nbsp;</th>
            <th>Optional Fields</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>1</td>
            <td>Risk</td>
        </tr>
        <tr>
            <td>2</td>
            <td>Detail</td>
        </tr>
       
    </tbody>
</table>*@

@{
    ViewBag.HeaderColumns = new[]
{
        //    { "Field", "Label", "Classes" }
        new[] { null, "Status", "text-center valign-middle"},
        new[] { "Title", "SPM Reference", "text-left" },
        new[] { "BusinessUnitID", "Busness Unit", "text-left"},
        new[] { "Field1", "Title", "text-left"},
        new[] { null, "Actions", "text-center valign-middle" },
        new[] { null, "Tracking", "text-center valign-middle" },
        new[] { null, "Documents", "text-center valign-middle" }

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
    ViewBag.AddNewEditTitle = "Mitigation Plan";

}
@helper BodyRows()
{
        <td width="5%" class="text-center valign-middle"><img src="~/Images/StatusLights/Small/greenlight.png" alt="OK" title="OK" data-bind="attr: {'update-attr': getStatusImage($($element), $data)}"></td>
        <td width="15%" class="text-left valign-middle"><button type="button" class="btn btn-link" data-bind="text: Title, click: $parent.viewPageRecord"></button></td>
        <td width="15%" class="text-left valign-middle"><div nowrap data-bind="text: lookupAbbreviationValue(BusinessUnitID)"></div></td>
        <td width="50%" class="text-left valign-middle"><div nowrap data-bind="text: Field1"></div></td>
        <td width="5%" class="text-center valign-middle"><button type="button" id="newWindow" data-bind="click: openMenuItemEditor.bind($data), enable: $parent.dataHubIsConnected" class="btn btn-danger btn-sm">Actions&nbsp;&nbsp;<span class="badge" data-bind="text: getActionCount(ID, $($element)), attr: {id: 'actionCount' + ID}">0</span></button></td>
        <td width="5%" class="text-center valign-middle"><button type="button" data-bind="click: openStartTracking.bind($data), visible: getActionStatusKey($data, $($element))" class="btn btn-danger btn-sm">Start</button></td>
        <td width="5%" class="text-center valign-middle"><button type="button" class="btn btn-default btn-sm" data-bind="click: openManageDocumentsDialog.bind($data), enable: $parent.dataHubIsConnected">Docs&nbsp;&nbsp;<span class="badge" data-bind="text: getDocumentCount(ID, $($element)), attr: {id: 'documentCount' + ID}">0</span></button></td>
        <td width="5%" class="text-center valign-middle" nowrap>
            <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.canEdit() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-pencil"></span></button>
            <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.canDelete() && $parent.dataHubIsConnected()"><span class="glyphicon glyphicon-remove"></span></button>
        </td>
}

@helper AddNewEditDialog(DataContext dataContext)
{

    <div class="col-md-12">

        @Html.Raw(dataContext.AddInputField<MitigationPlan>("Title"))
        @Html.Raw(dataContext.AddSelectField<MitigationPlan, BusinessUnit>("BusinessUnitID", "ID", "Name"))
        @for (int i = 0; i < ViewBag.ThemeFieldCount; ++i)
        {

            @Html.Raw(dataContext.AddTextAreaField<MitigationPlan>("Field" + (i + 1).ToString(), 2, ViewBag.ThemeFields[i].FieldName))
        }
        @Html.Raw(dataContext.AddTextAreaField<MitigationPlan>("Description"))
        @Html.Raw(dataContext.AddTextAreaField<MitigationPlan>("StatusNotes"))
    </div>

    <div class="row" data-bind="visible: $parent.recordMode()==RecordMode.AddNew">
        <div class="col-md-12">
            <div class="form-group">
                <label for="uploadFiles">Add Plan Related Documents:</label>
                <input id="uploadFiles" name="uploadFiles[]" type="file" multiple class="file-loading">
            </div>
        </div>
    </div>

}
@Html.Partial("PagedViewModel")

<div id="editActionItemDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="editActionItemFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div id="manageDocumentsDialog" class="modal modal-wide fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <iframe style="border: none" id="manageDocumentsFrame"></iframe>
                <button type="button" class="btn btn-default pull-right popup-ok-button" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
@Scripts.Render("~/js.bundle/fileinput")
    <script>
        @Html.Raw(Model.RenderViewModelConfiguration<MitigationPlan>(ViewBag, "ID", "false"))
        @Html.Raw(Model.RenderAbstract<BusinessUnit>("Abbreviation", buContext))


        function getStatusImage(element, record) {
            //console.log(record);
            var image, title, flag = 0;
            // flag = 1 is actions past due status ( red light)
            // flag = 2 is actions due status ( yellow light)
            // flag = 3 is actions not due or complete ( green light)
            // flag = 4 is action complete status (black light)
            // flag = 5 is pending (magenta light)
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryActionItems(record.ID).done(function (data) {
                    if (data.length === 0) {
                        flag = 6;
                    } else {
                        data.forEach(function (i) {
                            const days = (i.ScheduledEndDate.toDate()).daysBetween(new Date());
                            if (i.ActionTypeKey === 1) {
                                flag = 5;
                            } else if (days < 0 && i.ActionTypeKey !== 3) flag = 1;
                            else if (days < 7 && flag !== 1 && i.ActionTypeKey !== 3) flag = 2;
                            else if (days >= 7 && (flag > 2 || flag === 0) && i.ActionTypeKey !== 3) flag = 3;

                            //console.log(flag);
                        });
                        //console.log(flag);
                    }
                   
                    if (flag === 1) {
                        image = "@pastDueImage";
                        title = "Actions are past due";
                    } else if (flag === 2) {
                        image = "@dueImage";
                        title = "Actions are due";
                    } else if (flag === 3) {
                        image = "@noneImage";
                        title = "Actions avaiable";
                    } else if (flag === 5) {
                        image = "@pendingImage";
                        title = "Actions pending approval";

                    } else if (flag === 6) {
                        image = "@waitingImage";
                        title = "No Actions submitted";
                    }else {
                        image = "@completedImage";
                        title = "All Actions Complete";
                    }
                    element.attr("src", "@statusLightsImagePath" + image);
                    element.attr("alt", title);
                    element.attr("title", title);

                    return flag;
                });

            } else {
                image = "@completedImage";
                title = "All Actions Complete";

                element.attr("src", "@statusLightsImagePath" + image);
                element.attr("alt", title);
                element.attr("title", title);
            }


            return undefined;
        }

        function openStartTracking(record) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryActionItems(record.ID).done(function(data) {
                    data.forEach(function(i) {
                        //console.log(i);
                        if(i.ActionTypeKey == 1)
                            ++i.ActionTypeKey;
                        dataHub.updateActionItem(i).done(function() {
                            viewModel.queryPageRecords();
                        });
                    });

                });
            }

            //console.log(record);
            //    var email = 'bernest@gridprotectionalliance.org';
            //    var subject = 'Plan pending Approval for ' + record.Title;
            //    var body_message = "NOTIFICATION: %0A%0A" +
            //        "The following  mitigation plan is pending approval...%0A%0A" +
            //        "Plan: " + record.Title + "%0A" +
            //        "Business Unit: " + lookupNameValue(record.BusinessUnitID) + "%0A" +
            //        "Description: " + record.Description + "%0A%0A" +
            //        "Actions: %0A";


            //    if (viewModel.dataHubIsConnected()) {
            //        dataHub.queryActionItems(record.ID).done(function(data) {
            //            data.forEach(function(i) {
            //                //console.log(i);
            //                body_message += " - Title: " + i.Title + "  Details: " + i.Details + "%0A";
            //            });
            //            var mailto_link = 'mailto:' + email + '?subject=' + subject + '&body=' + body_message;
            //            window.open(mailto_link, 'emailWindow');
            //            //if (win && win.open && !win.closed) win.close();
            //        });

            //        var noticeRecord = { PatchID: record.ID, NoticeMethodKey: 1, ToUsers: email, Text: body_message, SentOn: (new Date()) }
            //        dataHub.addNewNoticeLog(noticeRecord);
            //    }
        }

        function getActionStatusKey(record, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryActionItems(record.ID).done(function(data) {
                    data.forEach(function(i) { if (i.ActionTypeKey === 1) element.show(); });

                });
            }

        }

        function getActionItemCount(pageID, element) {
            //console.log(PageID);
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryActionItemCount(pageID).done(function(count) {
                    const actionItemMode = $("#actionItemMode" + pageID);
                    const actionItemCount = $("#actionItemCount" + pageID);
                    const modeText = count > 0 ? "Edit" : "Add";

                    if (actionItemMode.text() !== modeText)
                        actionItemMode.text(modeText);

                    if (actionItemCount.text() !== count.toString())
                        actionItemCount.text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function() {
            setTimeout(function() {
                $("#editMenuItemFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);

        });

        function openMenuItemEditor(record) {
            //console.log(record);
            $("#editActionItemFrame").attr({
                "src": "@Url.Content("~/Main/ActionItem")?PlanID=" + record.ID + "&Title=" + encodeURIComponent(record.Title),
                "height": ($(document).height() - 150) + "px",
                "width": "100%"
            });

            $("#editActionItemDialog").modal("show");
        }

        $("#editActionItemDialog").on("hidden.bs.modal", function() {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#editActionItemFrame").attr("src", "about:blank");
        });
        
        const fileUploadUrl = "@Html.Raw(Url.Content("~/FileUploadHandler.ashx?SourceTable=MitigationPlanDocument&SourceField=MitigationPlanID"))";
        var selectedFiles;
        

        $(viewModel).on("beforeSave", function (event, observableRecord) {
            selectedFiles = $("#uploadFiles").fileinput("getFileStack");
        });

        $(viewModel).on("recordSaved", function (event, record, newRecord) {
            if (newRecord && selectedFiles.length > 0 && viewModel.dataHubIsConnected()) {
                dataHub.getLastMitigationPlanID().done(function (planID) {
                    $("#uploadFiles").fileinput({
                        uploadUrl: fileUploadUrl + "&SourceID=" + planID.toString(),
                        uploadAsync: true
                    });

                    for (var i = 0; i < selectedFiles.length; i++) {
                        $("#uploadFiles").fileinput("addToStack", selectedFiles[i]);
                    }

                    $("#uploadFiles").fileinput("upload");
                });
            }
        });
        
        function getDocumentCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryDocumentDetailCount("MitigationPlan", sourceID, null).done(function(count) {
                    $("#documentCount" + sourceID).text(count.toString());
                });
            }

            return element.text();
        }
        
        function getActionCount(sourceID, element) {
            if (viewModel.dataHubIsConnected()) {
                dataHub.queryActionItemCount(sourceID, null).done(function (count) {
                    $(element).text(count.toString());
                });
            }

            return element.text();
        }

        $(window).resize(function() {
            setTimeout(function() {
                $("#manageDocumentsFrame").attr("height", ($(document).height() - 150) + "px");
            }, 500);
        });

        function openManageDocumentsDialog(record) {
            const count = parseInt(notNull($("#documentCount" + record.ID).text(), 0));
            var initialMode = "";

            if (count < 1)
                initialMode = "/AddNew";

            $("#manageDocumentsFrame")
                .attr({
                    "src": "@Url.Content("~/Main/Documents")" + initialMode + "?SourceTable=MitigationPlan&SourceField=MitigationPlanID&SourceID=" + record.ID + "&Name=" + encodeURIComponent(record.Title),
                    "height": ($(document).height() - 150) + "px",
                    "width": "100%"
        });

        $("#manageDocumentsDialog").modal("show");
        }

        $("#manageDocumentsDialog").on("hidden.bs.modal", function() {
            // Refresh page counts after editing tasks
            viewModel.queryPageRecords();

            // Clear frame page
            $("#manageDocumentsFrame").attr("src", "about:blank");
        });

        $(function () {
            $("#manageDocumentsDialog").modal({ show: false, backdrop: "static", keyboard: false });

            $("#editActionItemDialog").modal({ show: false, backdrop: "static", keyboard: false });
            $("#addNewEditDialog").on("shown.bs.modal", function () {
                $("#uploadFiles").fileinput({
                    uploadUrl: fileUploadUrl,
                    uploadAsync: true,
                    showUpload: false,
                    showRemove: true,
                    showPreview: false,
                    minFileCount: 1,
                    maxFileCount: 12
                });
                
                if (viewModel.dataHubIsConnected()) {
                    dataHub.queryBusinessUnits().done(function (data) {
                        $('#selectBusinessUnitID').children().remove();
                        $.each(data, function (key, val) {
                            $('#selectBusinessUnitID').append(new Option(val.Name, val.ID));
                        });
                    });
                }
                
            });
        });
    </script>
}
