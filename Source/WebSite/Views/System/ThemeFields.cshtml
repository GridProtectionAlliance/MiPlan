@*******************************************************************************************************
    //  ThemeFields.cshtml - Gbtc
    //
    //  Copyright © 2016, Grid Protection Alliance.  All Rights Reserved.
    //
    //  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
    //  the NOTICE file distributed with this work for additional information regarding copyright ownership.
    //  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
    //  file except in compliance with the License. You may obtain a copy of the License at:
    //
    //      http://opensource.org/licenses/MIT
    //
    //  Unless agreed to in writing, the subject software distributed under the License is distributed on an
    //  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
    //  License for the specific language governing permissions and limitations.
    //
    //  Code Modification History:
    //  ----------------------------------------------------------------------------------------------------
    //  02/18/2016 - Ritchie Carroll
    //       Generated original version of source code.
    //
    //*****************************************************************************************************@
@using System.Collections.Specialized
@using GSF.Web.Model
@using MiPlan.Models
@model AppModel
@{
    DataContext dataContext = Model.DataContext;
    NameValueCollection parameters = Request.QueryString;
    int parentID = int.Parse(parameters["ID"] ?? "0");

    ViewBag.CustomTitle = "Edit Items in \"" + parameters["Name"] + "\" Theme Fields";
    ViewBag.PageHasMenu = false;

    ViewBag.HeaderColumns = new[]
    {   //    { "Field", "Label", "Classes" }
        new[] { "FieldNumber", "Field Number", "text-center" },
        new[] { "FieldName", "Field Name", "text-left" },
        new[] { "Description", "Description", "text-left" },

    };

    ViewBag.BodyRows = BodyRows().ToString();
    ViewBag.AddNewEditDialog = AddNewEditDialog(dataContext).ToString();
}
@helper BodyRows()
{
    <td width="15%" class="text-center valign-middle" data-bind="text: FieldNumber"></td>
    <td width="40%" class="text-left valign-middle" nowrap><button type="button" class="btn btn-link" data-bind="text: FieldName, click: $parent.viewPageRecord"></button></td>
    <td width="40%" class="text-left table-cell-hard-wrap"><div data-bind="text: $($element.parentElement.parentElement).truncateToWidth(Description, 1.5), attr: {title: Description}"></div></td>
    <td width="5%" class="text-center valign-middle" nowrap>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.editPageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-pencil"></span></button>
        <button type="button" class="btn btn-xs" data-bind="click: $parent.removePageRecord, enable: $parent.dataHubIsConnected"><span class="glyphicon glyphicon-remove"></span></button>
    </td>
}
@helper AddNewEditDialog(DataContext dataContext)
{
        @Html.Raw(dataContext.AddInputField<ThemeFields>("FieldName"))
        @Html.Raw(dataContext.AddTextAreaField<ThemeFields>("Description", rows: 3))
        @*@Html.Raw(dataContext.AddInputField<ThemeFields>("SortOrder"))
        @Html.Raw(dataContext.AddCheckBoxField<ThemeFields>("IsDefault"))
        @Html.Raw(dataContext.AddCheckBoxField<ThemeFields>("Hidden"))
        @Html.Raw(dataContext.AddCheckBoxField<ThemeFields>("Enabled"))*@
}
@Html.Partial("PagedViewModel")
@section Scripts {
    <script>
        "use strict";

        @Html.Raw(Model.RenderViewModelConfiguration<ThemeFields>(ViewBag, "FieldNumber", parentID))

        $(viewModel).on("beforeSave", function(event, observableRecord) {
            // Initialize selected value list record
            observableRecord.ThemeID(@parentID);
        });

        $(function() {
            $("#addNewEditDialog").on("shown.bs.modal", function () {
                // On add/edit dialog shown, disable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editThemeFieldsItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.prop("disabled", true);
                dismissButtons.invisible();
            });

            $("#addNewEditDialog").on("hidden.bs.modal", function () {
                // On add/edit dialog hidden, re-enable data-dismiss buttons on parent pop-up
                const dismissButtons = $("#editThemeFieldsItemDialog", window.parent.document).find("button[data-dismiss]");
                dismissButtons.visible();
                dismissButtons.prop("disabled", false);
            });
        });
    </script>
}